/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtCore module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** "Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include "geometryengine.h"
#include "quadtree.h"

#include <QVector2D>
#include <QVector3D>

//! [0]
GeometryEngine::GeometryEngine(int s)
    : indexBuf(QOpenGLBuffer::IndexBuffer)
{
    initializeOpenGLFunctions();

    // Generate 2 VBOs
    arrayBuf.create();
    indexBuf.create();

    // Initializes cube geometry and transfers it to VBOs
    initPlaneGeometry(s);

}

GeometryEngine::~GeometryEngine()
{
    arrayBuf.destroy();
    indexBuf.destroy();
}
//! [0]


//!
void GeometryEngine::initPlaneGeometry(int s)
{
    s=2;
    int planeSize=2;
    // For cube we would need only 8 vertices but we have to
    // duplicate vertex for each face because texture coordinate
    // is different.
    qInfo( "Debut initPlane" );

    int d = 1;
    QVector3D topleft(0.0f,0.0f,1.0f);

    QImage img;
    img.load(":/heightmap-1.png");
    if(img.isNull()){
        qInfo("img est null !");
    }

//    float x = topleft.x();
//    float y = topleft.y();
//    float z = topleft.z();
//    int dm = d-1;
//    float vectunit = planeSize/(pow(2,dm));
//    int imgheightunit = (img.height()-1)/(pow(2,dm));
//    int imgwitdthunit = (img.width()-1)/(pow(2,dm));

    VertexData vertices[4];
    GLushort indices[6];

    vertices[0].position=QVector3D(1.0f,1.0f,1.0f); vertices[0].texCoord=QVector2D(0.5f, 1.0f);
    vertices[1].position=QVector3D(1.0f,2.0f,1.0f); vertices[1].texCoord=QVector2D(0.5f, 1.0f);
    vertices[2].position=QVector3D(2.0f,1.0f,1.0f); vertices[2].texCoord=QVector2D(0.5f, 1.0f);
    vertices[3].position=QVector3D(2.0f,2.0f,1.0f); vertices[3].texCoord=QVector2D(0.5f, 1.0f);

    qInfo("QVector3d 2 : %f",vertices[2].position.x());

    indices[0]=0;
    indices[1]=1;
    indices[2]=2;
    indices[3]=1;
    indices[4]=3;
    indices[5]=2;

//    float imgpoint = img.pixelColor(x,y+imgheightunit).blue()*3.0f/255.0f;
//    vertices[1]={QVector3D(x,y+1.0f,z),QVector2D(0.0f,1.0f)};
//    imgpoint = img.pixelColor(x+imgwitdthunit,y).blue()*3.0f/255.0f;
//    vertices[2]={QVector3D(x+1.0f,y,z),QVector2D(0.0f,1.0f)};
//    imgpoint = img.pixelColor(x+imgwitdthunit,y+imgheightunit).blue()*3.0f/255.0f;
//    vertices[3]={QVector3D(x+1.0f,y+1.0f,z),QVector2D(0.0f,1.0f)};

//    quadtree qtree(1,QVector3D(0.0f,0.0f,1.0f),planeSize);

//    VertexData* vertices = qtree.getVertices();
//    GLushort* indices = qtree.getIndices();

//    qInfo("incides 1 : %hu",indices[2]);



    //! [1]
    // Transfer vertex data to VBO 0
    arrayBuf.bind();
    arrayBuf.allocate(vertices, 4 * sizeof(VertexData));

    // Transfer index data to VBO 1
    indexBuf.bind();
    indexBuf.allocate(indices, 6 * sizeof(GLushort));
    //! [1]

//    //! [1]
//    // Transfer vertex data to VBO 0
//    arrayBuf.bind();
//    arrayBuf.allocate(vertices, s*s * sizeof(VertexData));

//    // Transfer index data to VBO 1
//    indexBuf.bind();
//    indexBuf.allocate(indices, (s-1)*(s-1)*2*3 * sizeof(GLushort));
//    //! [1]

}


//! [2]
void GeometryEngine::drawPlaneGeometry(QOpenGLShaderProgram *program)
{
    // Tell OpenGL which VBOs to use
    arrayBuf.bind();
    indexBuf.bind();

    // Offset for position
    quintptr offset = 0;

    // Tell OpenGL programmable pipeline how to locate vertex position data
    int vertexLocation = program->attributeLocation("a_position");
    program->enableAttributeArray(vertexLocation);
    program->setAttributeBuffer(vertexLocation, GL_FLOAT, offset, 3, sizeof(VertexData));

    // Offset for texture coordinate
    offset += sizeof(QVector3D);

    // Tell OpenGL programmable pipeline how to locate vertex texture coordinate data
    int texcoordLocation = program->attributeLocation("a_texcoord");
    program->enableAttributeArray(texcoordLocation);
    program->setAttributeBuffer(texcoordLocation, GL_FLOAT, offset, 2, sizeof(VertexData));

    // Draw cube geometry using indices from VBO 1
    glDrawElements(GL_TRIANGLES, 1000000, GL_UNSIGNED_SHORT, 0);
}
//! [2]
